* Actor Spec
  :PROPERTIES:
  :ID:       15E33130-299B-4557-9125-D55809B625C3
  :ADDED:    [2014-07-07 Mon 12:30]
  :END:

** actor spawn
  :PROPERTIES:
  :ID:       7A7045F5-86D7-4902-B947-1EF9CADE3BDD
  :ADDED:    [2014-07-07 Mon 12:30]
  :END:

#+begin_src haskell
type ActorKey = String

data ActorDef st
  = ActorDef {
    _actorPreStart           :: IO (InitResult st)
  , _actorPostStop           :: IO ()
  , _actorPreRestart         :: st -> SomeException -> IO ()
  , _actorPostRestart        :: st -> SomeException -> IO ()
  , _actorRestartDirective   :: SomeException -> RestartDirective
  , _actorReceive            :: [EventHandler st]
  , _actorForker             :: IO () -> IO (Async ())
  }

data GenericActorDef = forall st . GenericActorDef (ActorDef st)

data SpawnInfo
  = NewActor {
    _spawnInfoActorDef   :: GenericActorDef
  }
  | forall st . RestartActor {
  , _spawnInfoPrevState   :: st
  , _spawnInfoFailedEvent :: GenericEvent
  , _spawnInfoActorDef    :: ActorDef st
  }

data SupervisionEvent
  = ActorSpawned { _supInitActorDef :: ActorInstance }
  | ActorTerminated {
      _supTerminatorActorKey :: ActorKey
    , _supTerminatedActorKey :: ActorKey
    }
  | ActorTerminatedByError {
      _supTerminatedError        :: SomeException
    , _supTerminatedActorKey     :: GenericActorDef
    , _supTerminatedOnInitialize :: Bool
    }
  | ActorTerminatedByKill { _supKillerActorKey :: ActorKey }

data Actor
  = Actor {
    _sendToActor     :: GenericEvent -> IO ()
  , _sendCtrlToActor :: SupervisionEvent -> IO ()
  , _actorDisposable :: Disposable
  }

data Supervisor
  = Supervisor {
    _sendToSupervisor  :: SupervisionEvent -> IO ()
  , _supJoin           :: IO ()
  , _supDispose        :: Disposable
  , _supActiveChildren :: TVar (HashMap ChildKey Actor)
  , _supChildren       :: TVar (HashMap ChildKey GenericActorDef)
  }

-- public API
defActor :: ActorBuilder st () -> ActorDef st
defSupervisor :: SupervisorBuilder -> IO Supervisor
addChild :: Supervisor -> ActorDef st -> IO Disposable
startChild :: Supervisor -> ActorDef st -> IO Disposable
startChildWithKey :: Supervisor -> ActorKey -> IO (Maybe Disposable)
joinSupervisorThread :: Supervisor -> IO ()

-- private API
_spawnActor :: Supervisor -> SpawnInfo -> IO Actor
_sendToSupervisor :: Supervisor -> SupervisionEvent -> IO ()
_sendToActor :: Typeable t => Actor -> t -> IO ()

#+end_src
